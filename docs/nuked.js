var __toBinary = /* @__PURE__ */ (() => {
  var table = new Uint8Array(128);
  for (var i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
  return (base64) => {
    var n = base64.length, bytes = new Uint8Array((n - (base64[n - 1] == "=") - (base64[n - 2] == "=")) * 3 / 4 | 0);
    for (var i2 = 0, j = 0; i2 < n; ) {
      var c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
      var c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
      bytes[j++] = c0 << 2 | c1 >> 4;
      bytes[j++] = c1 << 4 | c2 >> 2;
      bytes[j++] = c2 << 6 | c3;
    }
    return bytes;
  };
})();

// src/nuked.wasm
var nuked_default = __toBinary("");

// src/audio.worker.js
var audio_worker_default = "var wasmBytes = new Uint8Array([WASMBYTES])\n\nclass NukedOpl3Processor extends AudioWorkletProcessor {\n  constructor(...args) {\n    super(...args)\n\n    this.i = 0\n\n    WebAssembly.instantiate(wasmBytes, {}).then(({ instance }) => {\n      this.wasm = instance.exports\n      this.wasm.reset(sampleRate)\n      this.port.postMessage({ type: 'wasm-ready' })\n    })\n\n    this.port.onmessage = ({ data: { type, ...args } }) => {\n      if (type === 'queue') {\n        this.queuedSoundData = args.queue\n        this.sendTime(this.queuedSoundData)\n        this.port.postMessage({ type: 'queue' })\n        this.wasm.reset(sampleRate)\n        this.stop()\n      } else if (type === 'stop') {\n        this.stop()\n      } else if (type === 'play') {\n        this.play()\n      } else if (type === 'pause') {\n        this.pause()\n      } else if (type === 'seek') {\n        this.seek(args.time)\n      }\n    }\n  }\n\n  process(inputs, outputs, parameters) {\n    if (!this.wasm) {\n      return true\n    }\n\n    const bufferSize = outputs[0][0].length\n\n    if (this.queuedSoundData) {\n      this.soundData = this.queuedSoundData\n      this.queuedSoundData = null\n      this.dataIndex = 0\n      this.samplePosition = 0\n      this.wasm.reset(sampleRate)\n    }\n\n    // every 20 data-frames output info about time\n    if (this.i++ % 20 === 0) {\n      this.sendTime(this.soundData)\n    }\n\n    if (!this.soundData || this.softStop > 0) {\n      for (var sample = 0; sample < bufferSize; sample++) {\n        outputs[0][0][sample] = outputs[0][1][sample] = 0\n      }\n      return true\n    }\n\n    const rateFactor = this.soundData.cmdRate / sampleRate\n\n    const v = new DataView(this.wasm.memory.buffer)\n    const ptr = this.wasm.buf_ptr()\n\n    if (this.afterSeek) {\n      this.samplePosition = bufferSize * Math.floor(this.samplePosition / bufferSize)\n      this.afterSeek = false\n    }\n\n    for (var sample = 0; sample < bufferSize; sample++) {\n      while (this.dataIndex < this.soundData.commands.length && this.soundData.commands[this.dataIndex].t <= this.samplePosition * rateFactor) {\n        const command = this.soundData.commands[this.dataIndex++]\n        this.wasm.write(command.r, command.v)\n      }\n      if (this.dataIndex == this.soundData.commands.length) {\n        this.stop()\n      } else {\n        this.samplePosition++\n      }\n      this.wasm.render()\n      outputs[0][0][sample] = v.getInt16(ptr, true) / 32768\n      outputs[0][1][sample] = v.getInt16(ptr + 2, true) / 32768\n    }\n\n    return true\n  }\n\n  sendTime(soundData) {\n    const current = (this.samplePosition || 0) / (sampleRate ?? 1)\n    const total = !soundData?.commands || soundData.commands.length == 0 ? 0 : soundData.commands[soundData.commands.length - 1].t / soundData.cmdRate\n    this.port.postMessage({ type: 'time', total, current })\n  }\n\n  pause() {\n    this.softStop = this.softStop ? 0 : 1\n  }\n\n  stop() {\n    this.dataIndex = 0\n    this.samplePosition = 0\n    this.softStop = 1\n  }\n\n  play() {\n    this.softStop = 0\n  }\n\n  seek(time) {\n    if (!this.soundData?.commands) {\n      return\n    }\n    const adjTime = time * this.soundData.cmdRate\n    this.wasm.reset(sampleRate)\n    this.dataIndex = 0\n    var registerData = []\n    while (this.dataIndex < this.soundData.commands.length && this.soundData.commands[this.dataIndex].t < adjTime) {\n      const command = this.soundData.commands[this.dataIndex++]\n      registerData[command.r] = command.v\n    }\n    if (registerData[0x105]) {\n      this.wasm.write(0x105, registerData[0x105])\n    }\n    for (const r in registerData) {\n      this.wasm.write(r, registerData[r])\n    }\n    if (this.dataIndex < this.soundData.commands.length) {\n      this.samplePosition = time * sampleRate\n      this.afterSeek = true\n    } else {\n      this.stop()\n    }\n  }\n}\n\nregisterProcessor('nuked-opl3-processor', NukedOpl3Processor)\n";

// src/interface.js
var workletJS = audio_worker_default.replace("WASMBYTES", nuked_default.join(","));
var debug = false ? console.debug : () => {
};
function soundLoad(soundData) {
  if (soundData.dualOpl2Mode) {
    soundData.commands = soundData.commands.map((c) => {
      if (
        // Command writes into a relevant register...
        (c.r & 255) >= 192 && (c.r & 255) <= 200 && // ...that has all channel bits off
        // (which means it's likely just plain OPL2 data as expected)
        (c.v & 240) == 0
      )
        c.v |= c.r < 256 ? 16 : 32;
      return c;
    });
    soundData.commands.unshift({ t: 0, r: 261, v: 1 });
  }
  return soundData;
}
function imf(imfData, imfRate = 560) {
  var soundData = {
    commands: [],
    cmdRate: imfRate
  };
  var arr = new Uint8Array(imfData);
  var time = 0;
  var length = arr[0] | arr[1] << 8;
  var extraSearch = arr[2] | arr[3] << 8;
  var startOffset = 2;
  if (length == 0) {
    length = arr.byteLength;
    startOffset = extraSearch == 0 ? 0 : 2;
  }
  for (var i = startOffset; i < length; i += 4) {
    soundData.commands.push({ t: time, r: arr[i], v: arr[i + 1] });
    time += arr[i + 2] | arr[i + 3] << 8;
  }
  return soundLoad(soundData);
}
function raw(rawData) {
  const pitFreq = 14318180 / 12;
  var soundData = {
    commands: [],
    cmdRate: pitFreq
  };
  var arr = new Uint8Array(rawData);
  const get16 = (i2) => arr[i2] | arr[i2 + 1] << 8;
  const get32 = (i2) => arr[i2] | arr[i2 + 1] << 8 | arr[i2 + 2] << 16 | arr[i2 + 3] << 24;
  if (get32(0) != 1096237394 && get32(4) != 1096040772) {
    console.error("Not a RAW file: Bad file identifier!");
    return soundLoad(soundData);
  }
  var time = 0;
  var clock = get16(8);
  var regOffset = 0;
  for (var i = 10; i < arr.byteLength; i += 2) {
    const r = arr[i + 1];
    const v = arr[i];
    if (r == 0) {
      time += v * clock;
      continue;
    } else if (r == 2) {
      if (v == 0) {
        i += 2;
        clock = get16(i);
      } else if (v == 1) {
        regOffset = 0;
      } else if (v == 2) {
        regOffset = 256;
      }
      continue;
    } else {
      soundData.commands.push({ t: time, r: r | regOffset, v });
    }
  }
  return soundLoad(soundData);
}
function dro(droData) {
  var soundData = {
    commands: [],
    cmdRate: 1e3,
    dualOpl2Mode: false
  };
  var arr = new Uint8Array(droData);
  const get16 = (i2) => arr[i2] | arr[i2 + 1] << 8;
  const get32 = (i2) => arr[i2] | arr[i2 + 1] << 8 | arr[i2 + 2] << 16 | arr[i2 + 3] << 24;
  if (get32(0) != 1095909956 && get32(4) != 1280331607) {
    console.error("Not a DRO file: Bad file identifier!");
    return soundLoad(soundData);
  }
  const version = get16(8).toString(16) + "." + get16(10).toString(16);
  debug("DRO file version:", version == "0.1" ? 1 : +version);
  if (version < 2) {
    const hardware = arr[20];
    switch (hardware) {
      case 0:
        debug("Chip type: OPL2");
        break;
      case 1:
        debug("Chip type: OPL3");
        break;
      case 2:
        debug("Chip type: Dual OPL2");
        soundData.dualOpl2Mode = true;
        break;
      default:
        debug("Unknown chip type!");
        return soundLoad(soundData);
    }
    const dataOffset = get32(20) - hardware == 0 ? 24 : 21;
    var time = 0;
    var regOffset = 0;
    for (var i = dataOffset; i < arr.byteLength; i++) {
      const r = arr[i];
      switch (r) {
        // Delay D
        case 0:
          time += arr[i + 1] + 1;
          i++;
          break;
        // Delay Dl, Dh
        case 1:
          time += (arr[i + 1] | arr[i + 2] << 8) + 1;
          i += 2;
          break;
        // Set low chip / p0
        case 2:
          regOffset = 0;
          break;
        // Set high chip / p1
        case 3:
          regOffset = 256;
          break;
        // Register escape: [E], R, V
        case 4:
          soundData.commands.push({ t: time, r: arr[i + 1] | regOffset, v: arr[i + 2] });
          i += 2;
          break;
        // R, V
        default:
          soundData.commands.push({ t: time, r: r | regOffset, v: arr[i + 1] });
          i++;
          break;
      }
    }
    return soundLoad(soundData);
  } else if (version == 2) {
    const hardware = arr[20];
    switch (hardware) {
      case 0:
        debug("Chip type: OPL2");
        break;
      case 1:
        debug("Chip type: Dual OPL2");
        soundData.dualOpl2Mode = true;
        break;
      case 2:
        debug("Chip type: OPL3");
        break;
      default:
        debug("Unknown chip type!");
        return soundLoad(soundData);
    }
    const format = arr[21];
    if (format != 0) {
      console.error("Only interleaved mode is supported!");
      return soundLoad(soundData);
    }
    const compression = arr[22];
    if (compression != 0) {
      console.error("Only uncompressed data is supported!");
      return soundLoad(soundData);
    }
    const shortDelayCode = arr[23];
    const longDelayCode = arr[24];
    const codemapLength = arr[25];
    var codes = [];
    for (var i = 0; i < codemapLength; i++) codes[i] = arr[26 + i];
    var time = 0;
    for (var i = 26 + codemapLength; i < arr.byteLength; i++) {
      const r = arr[i];
      switch (r) {
        // Delay D
        case shortDelayCode:
          time += arr[i + 1] + 1;
          i++;
          break;
        // 256x delay D
        case longDelayCode:
          time += arr[i + 1] + 1 << 8;
          i++;
          break;
        // R, V
        default:
          const rc = r & 128 ? 256 | codes[r & 127] : codes[r];
          soundData.commands.push({ t: time, r: rc, v: arr[i + 1] });
          i++;
          break;
      }
    }
    return soundLoad(soundData);
  } else {
    console.error("DRO version", +version, "playback not supported!");
    return soundLoad(soundData);
  }
}
function vgm(vgmData, loopRepeat) {
  var soundData = {
    commands: [],
    cmdRate: 44100,
    dualOpl2Mode: false
  };
  var arr = new Uint8Array(vgmData);
  const get32 = (i2) => arr[i2] | arr[i2 + 1] << 8 | arr[i2 + 2] << 16 | arr[i2 + 3] << 24;
  if (get32(0) != 544040790) {
    console.error("Not a VGM file: Bad file identifier!");
    return soundLoad(soundData);
  }
  const version = get32(8).toString(16);
  const dataOffset = version < 150 ? 64 : 52 + get32(52);
  debug("VGM file version:", +(version / 100).toFixed(2), "data offset:", dataOffset);
  var loopOffset = get32(28);
  if (loopOffset) loopOffset += 28;
  const loopCount = get32(32);
  if (loopCount) debug("Loop present:", loopCount, "@", loopOffset);
  const clockOpl2 = get32(80) & 1073741823;
  const clockOpl3 = get32(92) & 1073741823;
  if (clockOpl2 == 3579545) debug("OPL2 detected:", clockOpl2, "Hz", "(standard clock rate)");
  else if (clockOpl2) debug("OPL2 detected:", clockOpl2, "Hz");
  if (clockOpl3 == 14318180) debug("OPL3 detected:", clockOpl3, "Hz", "(standard clock rate)");
  else if (clockOpl3) debug("OPL3 detected:", clockOpl3, "Hz");
  const dualOpl2 = get32(80) & 1073741824;
  const dualOpl3 = get32(92) & 1073741824;
  if (dualOpl2) {
    debug("Dual OPL2 mode!");
    soundData.dualOpl2Mode = true;
  }
  if (dualOpl3) {
    console.error("Dual OPL3 mode not supported!");
    return soundLoad(soundData);
  }
  if (clockOpl2 && clockOpl3) {
    console.error("Combined OPL2 and OPL3 playback not supported!");
    return soundLoad(soundData);
  }
  var time = 0;
  for (var loop = 0; loop < (loopCount ? 1 + (loopRepeat ?? 1) : 1); loop++) {
    var start = loop == 0 ? dataOffset : loopOffset;
    for (var i = start; i < arr.byteLength; i++) {
      if (arr[i] >= 112 && arr[i] <= 127) {
        time += arr[i] & 15;
      } else
        switch (arr[i]) {
          case 90:
            soundData.commands.push({ t: time, r: arr[i + 1], v: arr[i + 2] });
            i += 2;
            break;
          case 91:
            soundData.commands.push({ t: time, r: arr[i + 1], v: arr[i + 2] });
            i += 2;
            break;
          case 94:
            soundData.commands.push({ t: time, r: arr[i + 1], v: arr[i + 2] });
            i += 2;
            break;
          case 170:
          // YM3812#2 R, V
          // Stored in YMF262 p1. Only allowed because the OPL2 + OPL3 combination is forbidden!
          // case fall-through!
          case 95:
            soundData.commands.push({ t: time, r: 256 | arr[i + 1], v: arr[i + 2] });
            i += 2;
            break;
          case 97:
            time += arr[i + 1] | arr[i + 2] << 8;
            i += 2;
            break;
          case 98:
            time += 735;
            break;
          case 99:
            time += 882;
            break;
          case 102:
            i = arr.byteLength;
            break;
          default:
            console.warn("Unknown command", arr[i].toString(16), "at offset", i);
            if (arr[i] >= 48 && arr[i] <= 63) i++;
            else if (arr[i] >= 65 && arr[i] <= 78) i += version < 160 ? 1 : 2;
            else if (arr[i] >= 201 && arr[i] <= 207 || arr[i] >= 215 && arr[i] <= 223) i += 3;
            else if (arr[i] >= 226 && arr[i] <= 255) i += 4;
            else return;
            break;
        }
    }
  }
  return soundLoad(soundData);
}
var waitForMessage = (port, type, timeout = 500) => new Promise((resolve, reject) => {
  const cb = ({ data }) => {
    if (data.type === type) {
      clearTimeout(t);
      port.removeEventListener("message", cb);
      resolve(data);
    }
  };
  port.addEventListener("message", cb);
  const t = setTimeout(() => {
    port.removeEventListener("message", cb);
    reject(new Error(`Timeout waiting for ${type}`));
  }, timeout);
});
var TimeEvent = class extends Event {
  #total;
  #current;
  constructor({ total, current }) {
    super("time");
    this.#total = total;
    this.#current = current;
  }
  get total() {
    return this.#total;
  }
  get current() {
    return this.#current;
  }
};
async function createAudioWorklet(audioContext, queue) {
  await audioContext.audioWorklet.addModule(URL.createObjectURL(new Blob([workletJS], { type: "application/javascript" })));
  const node = new AudioWorkletNode(audioContext, "nuked-opl3-processor", { numberOfOutputs: 1, outputChannelCount: [2] });
  node.port.start();
  await waitForMessage(node.port, "wasm-ready");
  node.port.addEventListener("message", ({ data: { type, ...info } }) => {
    if (type === "time") {
      node.dispatchEvent(new TimeEvent(info));
      node.timeTotal = info.total;
      node.timeCurrent = info.current;
    }
  });
  node.play = () => node.port.postMessage({ type: "play" });
  node.stop = () => node.port.postMessage({ type: "stop" });
  node.pause = () => node.port.postMessage({ type: "pause" });
  node.seek = (time) => node.port.postMessage({ type: "seek", time });
  node.queue = async (queue2) => {
    node.port.postMessage({ type: "queue", queue: queue2 });
    await waitForMessage(node.port, "queue");
  };
  if (queue) {
    await node.queue(queue);
  }
  return node;
}
export {
  createAudioWorklet,
  dro,
  imf,
  raw,
  vgm
};
